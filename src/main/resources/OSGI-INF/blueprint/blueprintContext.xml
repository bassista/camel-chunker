<?xml version="1.0" encoding="UTF-8"?>
<!--
~ Copyright (C) Red Hat, Inc.
~ http://www.redhat.com
~
~ Licensed under the Apache License, Version 2.0 (the "License");
~ you may not use this file except in compliance with the License.
~ You may obtain a copy of the License at
~
~    http://www.apache.org/licenses/LICENSE-2.0
~
~ Unless required by applicable law or agreed to in writing, software
~ distributed under the License is distributed on an "AS IS" BASIS,
~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~ See the License for the specific language governing permissions and
~ limitations under the License.
-->
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:camel="http://camel.apache.org/schema/blueprint"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
                               http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd
                               http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0 http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd">

  <cm:property-placeholder persistent-id="org.jboss.poc.camelchunker" update-strategy="reload">
    <cm:default-properties>
      <cm:property name="file.consumer.path" value="data/input"/>
      <cm:property name="file.consumer.chunkSize" value="1024"/>
      <cm:property name="file.producer.path" value="data/output"/>
    </cm:default-properties>
  </cm:property-placeholder>
 
  <bean id="chunkedInputStreamFactory" class="org.jboss.poc.chunker.ChunkedInputStreamFactory">
    <property name="chunkSize" value="${file.consumer.chunkSize}"/>
  </bean>
 
  <camelContext id="camel-chunker" trace="false" xmlns="http://camel.apache.org/schema/blueprint">

    <route id="fileConsumerRoute">
      <from uri="file://{{file.consumer.path}}?moveFailed=.error"/>
      <log message="Consumed a file: ${headers[CamelFileName]}"/>
      <convertBodyTo type="java.io.InputStream"/>
      <bean ref="chunkedInputStreamFactory" method="newInstance(${body})"/>
      <split streaming="true">
        <simple>${body}</simple>
        <to uri="direct:handleChunk"/>
      </split>
    </route>

    <route id="chunkHandlerRoute">
      <from uri="direct:handleChunk"/>
      <log message="Writing chunk: ${headers[CamelSplitIndex]}++ of ${headers[CamelSplitSize]}..."/>
      <to uri="file://{{file.producer.path}}?fileExist=Append"/>
      <!--
      Change the "to" portion to this if you want to see the individual chunks being written.
      <setHeader headerName="CamelFileName">
        <simple>${file:onlyname.noext}-${headers[CamelSplitIndex]}++.txt</simple>
      </setHeader>
      <to uri="file://{{file.producer.path}}"/>
      -->
    </route>

  </camelContext>

</blueprint>
